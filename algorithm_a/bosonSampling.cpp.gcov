        -:    0:Source:bosonSampling.cpp
        -:    0:Graph:bosonSampling.gcno
        -:    0:Data:bosonSampling.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "header.h"
        -:    2:
        -:    3:void bosonSampler(vector<vector<complex<double>>> A, int n, int m, vector<int> &z) {
        -:    4:    // Line 1
        2:    5:    vector<int> r;
        -:    6:    // Line 2
       16:    7:    for (int k = 1; k <= n; k++) {
        -:    8:        // Line 3
        6:    9:        vector<int> w;
        6:   10:        vector<vector<int>> C_k;
        6:   11:        comb(n, k, C_k);
      120:   12:        for (int i = 1; i <= m; i++) {
       54:   13:            r.push_back(i);
       54:   14:            int w_i = 0;
      360:   15:            for (int j = 1; j <= C_k.size(); j++) {
        -:   16:                // Make A_cri
      126:   17:                vector<vector<complex<double>>> A_cri;
      684:   18:                for (int a = 0; a < r.size(); a++) {
      216:   19:                    vector<complex<double>> tempRow;
     1944:   20:                    for (int b = 0; b < C_k[j-1].size(); b++) {
     2592:   21:                        tempRow.push_back(A[r[a]-1][C_k[j-1][b]-1]);
      432:   22:                    }
      216:   23:                    A_cri.push_back(tempRow);
      216:   24:                }
        -:   25:                // print2dComplexVec(A_cri);
        -:   26:                // cout << endl;
      504:   27:                w_i += norm(getPerm(A_cri));
      126:   28:            }
       54:   29:            w.push_back(w_i);
       54:   30:            r.pop_back(); // Turn (r, i) back into r
       54:   31:        }
        -:   32:        // Line 4
        6:   33:        discrete_distribution<> d(w.begin(), w.end());
       18:   34:        random_device rd;
       12:   35:        mt19937 gen(rd());
       12:   36:        int x = d(gen) + 1;
        -:   37:        // Line 5
        6:   38:        r.push_back(x);
        6:   39:    }
        -:   40:    // Line 7
        2:   41:    sort(r.begin(), r.end());
        2:   42:    z = r;
        2:   43:}
        -:   44:
        -:   45:int main(int argc, char *argv[]) {
        -:   46:    int n, m;
        2:   47:    if (argc != 3) {
    #####:   48:        cout << "You didn't enter an n and an m!!!" << endl;
    #####:   49:        exit(0);
        -:   50:    }
        4:   51:    n = stoi(argv[1]);
        4:   52:    m = stoi(argv[2]);
        -:   53:
        -:   54:    // Make random unitary matrix A
        2:   55:    vector<vector<complex<double>>> A;
        2:   56:    randomUnitary(m, A);
        6:   57:    print2dComplexVec(A);
        -:   58:
        -:   59:    // Run bosson sampling algorithm A
        2:   60:    vector<int> output;
        6:   61:    bosonSampler(A, n, m, output);
        2:   62:    cout << "[ ";
       16:   63:    for (int i = 0; i < output.size(); i++) {
       18:   64:        cout << output[i] << " ";
        6:   65:    }
        2:   66:    cout << "]";
        2:   67:    cout << endl;
        2:   68:    return 0;
        2:   69:}
