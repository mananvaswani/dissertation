// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cxPerm
arma::cx_double cxPerm(arma::cx_mat A);
RcppExport SEXP _BosonSampling_cxPerm(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cxPerm(A));
    return rcpp_result_gen;
END_RCPP
}
// cxPermMinors
arma::cx_vec cxPermMinors(arma::cx_mat C);
RcppExport SEXP _BosonSampling_cxPermMinors(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(cxPermMinors(C));
    return rcpp_result_gen;
END_RCPP
}
// rePerm
double rePerm(arma::mat B);
RcppExport SEXP _BosonSampling_rePerm(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rePerm(B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BosonSampling_cxPerm", (DL_FUNC) &_BosonSampling_cxPerm, 1},
    {"_BosonSampling_cxPermMinors", (DL_FUNC) &_BosonSampling_cxPermMinors, 1},
    {"_BosonSampling_rePerm", (DL_FUNC) &_BosonSampling_rePerm, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BosonSampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
